import{M as D,br as I,bp as v,i as A,T,N as E,a5 as N,a6 as O,r as w,aa as R,a8 as _,a9 as B,z as h,B as p,j as a,Q as P,a as F,H as M,l as W,ai as k}from"./index.Dg3lKJeg.js";import{D as x,u as Q,g as $}from"./useIsSettingsIntegrationEnabled.B5bcKBF5.js";import{G as q}from"./findManyDatabaseConnections.CX9HXIjR.js";import{S as j}from"./SaveAndCancelButtons.DdB8J98L.js";import{S as G}from"./SettingsPageContainer.CJeLyK8s.js";import{s as V,a as H,S as z}from"./SettingsIntegrationDatabaseConnectionForm.DZFnB4fV.js";import{u as K}from"./useSettingsIntegrationCategories.BCNgJ2AL.js";import{S as L}from"./SubMenuTopBarContainer.BNGFwgBo.js";import"./IconDeviceFloppy.CaehffdS.js";import"./Breadcrumb.CQyf5Hn6.js";const Y=D`
  ${x}
  mutation createServer($input: CreateRemoteServerInput!) {
    createOneRemoteServer(input: $input) {
      ...RemoteServerFields
    }
  }
`,J=()=>{const e=I(),[o]=v(Y,{client:e});return{createOneDatabaseConnection:async s=>await o({variables:{input:s},update:(t,{data:n})=>{const i=n==null?void 0:n.createOneRemoteServer;if(!i)return;const c={query:q,variables:{input:{foreignDataWrapperType:s.foreignDataWrapperType}}};if(A(t.readQuery(c))){t.updateQuery(c,r=>({findManyRemoteServersByType:[...r.findManyRemoteServersByType,i]}));return}}})}},U=V.transform(e=>({foreignDataWrapperType:"postgres_fdw",foreignDataWrapperOptions:{dbname:e.dbname,host:e.host,port:e.port},userMappingOptions:{password:e.password,user:e.user},schema:e.schema,label:e.label})),X=H.transform(e=>({foreignDataWrapperType:"stripe_fdw",foreignDataWrapperOptions:{api_key:e.api_key},label:e.label})),pe=()=>{const{databaseKey:e=""}=T(),o=E(),g=N(),[s]=K(),t=s.integrations.find(({from:{key:l}})=>l===e),{createOneDatabaseConnection:n}=J(),{enqueueErrorSnackBar:i}=O(),c=Q(e),r=!!t&&c;w.useEffect(()=>{r||g(R.NotFound)},[t,e,g,r]);const d=e==="postgresql"?U:X,m=_({mode:"onTouched",resolver:B(d)});if(!r)return null;const u=h(p.Integrations),b=m.formState.isValid,y=async()=>{var f;const l=m.getValues();try{const C=(f=(await n(d.parse({...l,foreignDataWrapperType:$(e)}))).data)==null?void 0:f.createOneRemoteServer.id;if(!C)throw new Error("Failed to create connection");o(p.IntegrationDatabaseConnection,{databaseKey:e,connectionId:C})}catch(S){i({apolloError:S instanceof k?S:void 0})}};return a(L,{title:"New",links:[{children:"Workspace",href:h(p.Workspace)},{children:"Integrations",href:u},{children:t.text,href:`${u}/${e}`},{children:"New"}],actionButton:a(j,{isSaveDisabled:!b,onCancel:()=>o(p.IntegrationDatabase,{databaseKey:e}),onSave:y}),children:a(G,{children:a(P,{...m,children:F(W,{children:[a(M,{title:"Connect a new database",description:"Provide the information to connect your database"}),a(z,{databaseKey:e})]})})})})};export{pe as SettingsIntegrationNewDatabaseConnection};
